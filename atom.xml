<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Chen Yangjian's Blog]]></title>
  <link href="http://cyj.me/atom.xml" rel="self"/>
  <link href="http://cyj.me/"/>
  <updated>2012-04-08T01:05:42+08:00</updated>
  <id>http://cyj.me/</id>
  <author>
    <name><![CDATA[Chen Yangjian]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[正月里去厦门（一）]]></title>
    <link href="http://cyj.me/2012/04/07/xiamen/"/>
    <updated>2012-04-07T23:15:00+08:00</updated>
    <id>http://cyj.me/2012/04/07/xiamen</id>
    <content type="html"><![CDATA[<p>正月里，走亲访友之余，我与妹纸去了厦门。要去那是老早就定了的。有段时间，宅在家里，只能让思想在路上，
于是给自己列了好些个备选考虑着要去哪儿玩合适，就近的天目山、千岛湖，远些的苏州、厦门，搜罗了游记来看。</p>

<p>天目山在临安，据说秋天的时候去会比较精彩，但景点说来说去好像就是几棵大树。千岛湖挺好的，老景区，
应该挺成熟的了吧；不过据老鸭的女朋友说，最近只开放两个岛，其余的都在养护。苏州自然也是不错的，
离杭州很近，大名鼎鼎的园林，蜚声中外的苏州博物馆，加上好多奇奇怪怪的加分原因（偶像钱钟书、张佳玮，
都是无锡人，同事里有常州、苏州、南通、徐州甚至连云港，让我对江苏整体上有个好印象，哈哈）。</p>

<p>不过真正准备出发的时间已经是春节假期里，我在瑞安，女朋友在温岭，天气又冷，于是决定往南走，去厦门。
决定了之后，买票、定旅店，都是女朋友搞定。定旅店的时候是年29晚上，她百度了个神奇的网站叫住哪儿网，
定了曾厝垵里一个神奇的青年旅社叫做逅海驿栈（起名字千万不要太多别字，打起来太累，
太容易用广为使用的那个代替）。然而等我们发现其实没有定成功的时候已经是正月初五的晚上11点钟了，
我们拖着行李在环岛路上走了好久。</p>

<p>因为买不到合适时间的车票，我们的时间安排很奇葩，初五晚上到厦门，住曾厝垵一晚，次日玩厦大、环岛南路等，
再住曾厝垵一晚，第三日早晨往鼓浪屿，玩一天，住一晚，第四天一早赶往火车站，回家。三晚，才玩两天，
都是让车票给害的。当然，如果能够早一些些，初三、四就出发，应该能好很多。</p>

<p>初五，我老妹开着送我们去瑞安飞云的火车站。彼时恰好雨过天晴，途径飞云某地时，锦山秀水，云萦雾绕，
很是好看。飞云的动车站，建成有些时候了，刚投入使用的时候，连停车场都没好，一出站全是站着的出租车、
黄油车司机，夹杂着来接乘客的人，乱哄哄的，配合坑洼的地面，很有三线小城市的感觉。不过此番我们去，
已经好多了。</p>

<p>检票、进站、候车，按下不表。从瑞安往南，风土没太大变化，隧道、海岸、湖泊、寺庙。气温倒是一点点往上升，
等到晚上9点多我们到厦门，发现好多人穿得薄外套，比起瑞安暖和得一塌糊涂的时候，内心还是有点小澎湃的。
我们到的是厦门北，直接打车略贵，但可能因为车站管事的下班了，车站没有一辆出租车是老老实实拉客的，
全都拿自己当黄油车使，不打表，乱拼车。于是坐了往厦工大思明校区的公交车，决定到思明区再打车。
一个很囧的事情是，我们零钱不够⋯⋯ 不过还好有个同车的从上海过来的帅哥给我了一块，救了江湖之急。</p>

<p>一般说去厦门玩，指的都是厦门岛与鼓浪屿，推荐的景点不少，但最出名的还是厦门岛南部的中山路、
环岛南路以及厦门大学，和鼓浪屿。在我们坐公交车进岛的时候，路过集美大学，彼时内心只有一个感慨，
真骚包啊⋯⋯ 集美大学的教学楼是欧式的，看着跟城堡似的，景观灯布置得也很好，各种美。马路边的绿化，
跟杭州比感觉是另一番世界，另一种风格了，但一样的干净。</p>

<p>接近终点站的时候，马路边看到家卖沙茶面的店，很诱人，就跳下车宵夜去。麻辣烫，点了一堆吃的，
主食自然选沙茶面。桌上有辣酱甜酱，不怎么辣，加了些。内心戏是樱木吃到晴子做的面，真好吃啊。
吃完我们打车到了曾厝垵，这小渔村直接给了一个下马威，往里走的路错综复杂，跟我小时候读书的湖岭镇老街差不多，
要找那个逅海驿栈可真难了。站在环岛路边，卖水果的大叔说，让店老板出来接你还差不多。于是打电话、
等老板出来，发现预约失败，但幸好还有空房，于是好歹住了店。</p>

<p>第二天醒来曾厝垵接着给了我们一个大惊喜，这里的路牌是没有顺序的，抽签的！
于是大众点评上推荐的神马吃的我们是完全只能碰运气找了。早饭去了家看着挺洋气的店，原谅我想不起店名了，
海鲜粥、排骨面，中规中矩。出来之后接着各种坑爹，在垵里胡乱晃悠，不过这小渔村却是挺好，很干净，
房子各种美。门脸儿都很风骚，院门有文艺的有复古的有装高门大阀的。也有不少老房子。</p>

<p><a href="http://www.yupoo.com/photos/yicai-cyj/84729172/" title="曾厝垵里的老房子"><img src="http://pic.yupoo.com/yicai-cyj/BO5ThJDd/medium.jpg" alt="曾厝垵里的老房子" width="500" height="333" border="0" /></a></p>

<p>后来我们靠着指南针走了出来，到了环岛路，打车，第一个目的地厦门大学。出租车司机挺好，推荐我们说，
从厦大西门进，先看厦大白城，比较有趣。自然从善如流。</p>

<p><a href="http://www.yupoo.com/photos/yicai-cyj/84729210/" title="IMG_8947"><img src="http://pic.yupoo.com/yicai-cyj/BO5TMGNK/medium.jpg" alt="IMG_8947" width="500" height="333" border="0" /></a></p>

<p><a href="http://www.yupoo.com/photos/yicai-cyj/84729241/" title="IMG_8969"><img src="http://pic.yupoo.com/yicai-cyj/BO5TUEoD/medium.jpg" alt="IMG_8969" width="500" height="333" border="0" /></a></p>

<p>忘了说这一天的天气，晴，最高温度二十多度，跟我记忆中的正月初六天差地远。在这样的天气，
逛厦大白城，看里头各种南洋风格的植物（原谅我，真的叫不来），感觉奇妙。</p>

<p><a href="http://www.yupoo.com/photos/yicai-cyj/84729209/" title="IMG_8946"><img src="http://pic.yupoo.com/yicai-cyj/BO5TIV2I/medium.jpg" alt="IMG_8946" width="500" height="333" border="0" /></a></p>

<p><a href="http://www.yupoo.com/photos/yicai-cyj/84729247/" title="IMG_8972"><img src="http://pic.yupoo.com/yicai-cyj/BO5U69UN/medium.jpg" alt="IMG_8972" width="333" height="500" border="0" /></a></p>

<p>逛了个把时辰，看到有后山，联想到老和山上鸟瞰玉泉校区，我便想上山看看厦大，发现拦住了上不去，
也没有好走的山路。正研究着，小区里走出个好心大伯，指引我们铁丝网角落一缺口，告诉我们说，沿着这小路，
可以上山，还可以逃票进植物园。大伯是好心，结果办了坏事。这小路一开始还算清楚，上了山之后几不可辨，
我们赫然发现周遭从洋气建筑变成深山老林，当真有些慌乱，后来几经周折，胡乱摸索，翻了铁丝网又翻回去，
总算是重返人间。</p>

<p>回到校园，已过晌午，点评上推荐的厦大里的食堂没吃的了，于是决定出厦大，去顶澳仔路找吃的。
出门在外，大众点评很好用，搜索附近500米吃的，各种靠谱。在去那儿的路上，还买了个摊煎饼，木有油条，
包的是粉丝，很好吃！到了顶澳仔路，发现小吃挺多，著名餐饮连锁兰州拉面与沙县小吃，
自然也不缺席。我们去了一家评价还不错的咖啡店，叫黑糖（似乎各地都有连锁）。
服务员是老外，有点意外。</p>

<p><a href="http://www.yupoo.com/photos/yicai-cyj/84729928/" title="IMG_9017"><img src="http://pic.yupoo.com/yicai-cyj/BO63OJX0/medium.jpg" alt="IMG_9017" width="500" height="333" border="0" /></a></p>

<p>吃完回来，逛厦大旁边的南普陀寺。这俩景点挺有意思，挨着。寺里全是人，游客、香客，和尚成了稀客。
不过游客引导工作做得倒很好，右边上左边下，川流不息。然后我发现很囧的事实，要俯瞰厦大，
从南普陀寺上山，有个很好的观景台，学校、海景，尽收眼底。我们之前爬得山，算是白费了。
姑娘说，老娘可爬不动了，不看也罢。只好半途折返，施施然出来，去找环岛南路上那片漂亮沙滩，
面朝大海，春暖花开一下。</p>

<p><a href="http://www.yupoo.com/photos/yicai-cyj/84729934/" title="IMG_9019"><img src="http://pic.yupoo.com/yicai-cyj/BO63SwN3/medium.jpg" alt="IMG_9019" width="500" height="333" border="0" /></a></p>

<p><a href="http://www.yupoo.com/photos/yicai-cyj/84729944/" title="IMG_9025"><img src="http://pic.yupoo.com/yicai-cyj/BO641cZu/medium.jpg" alt="IMG_9025" width="500" height="333" border="0" /></a></p>

<p>时间是下午四点多，太阳小了很多，光线柔和，踩沙滩各种舒坦。沙滩就在演武大桥的西端，在沙滩上往西走，
有一段木栈道，在我们去的时候，近黄昏，散起步来真是风情万种。</p>

<p>走过这段木栈道，天色变暗，气温转凉，我们租了辆自行车回住处添衣裳。童鞋们贴的游记不假，在这段路上骑行，
真的感觉挺好，尤其是寻常见不到海的同学。在这路上骑车，旁边就是大海，往南看除了一两个海岛一望无际，
想想都起鸡皮疙瘩，文艺得一塌糊涂。</p>

<p>发现又拍相册只更新到南普陀寺，就先写到这吧，其余明天继续。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再度搬家]]></title>
    <link href="http://cyj.me/2012/03/06/yet-another-site-moving/"/>
    <updated>2012-03-06T20:02:00+08:00</updated>
    <id>http://cyj.me/2012/03/06/yet-another-site-moving</id>
    <content type="html"><![CDATA[<p>从练手到如今吃这碗饭，我做了好多个网站，最早的用
<a href="http://mwolson.org/projects/EmacsMuse.html">Emacs Muse</a> 学习
<a href="http://lifegoo.pluskid.org/">pluskid</a> 做了个全是静态页的网站，叫过很多域名，
待过很多地方，但网站的名字一直没变：《采薇采薇》。然而在我就职的首家公司，
技术以 J2EE 与 Flex 为主，用 Emacs 的机会并不多，于是后来又跟风用
<a href="http://staceyapp.com/">stacey</a> 制作了新版的个人网站，展示的是自己的画、
和一点点浅薄的技术积累。</p>

<p>到了 2012年，我的工具包又发生了变化，多了 Ruby，Git，与 Vim，套用句广告词，
世界每天都在变，于是我再度追新，用上了 jekyll。牵引后果，技术考量，
在我之前的博客中我已经说过，不赘述。</p>

<p>与过去相比，今年另一个大变化是，我与人合租了个 Linode VPS，
于是我把篇首提到的俩网站拾掇拾掇，都给放了出来，斗胆贻笑大方。它们分别是
<a href="http://2008.cyj.me">2008.cyj.me</a> 与 <a href="http://2011.cyj.me">2011.cyj.me</a>。
VPS 与 Dreamhost 等空间相比的好处是，许多技术细节直接暴露给我，
使我在搭服务的时候学习到不少东西。如果不是因为 bus.fm 与 luoo.net 要放上来，
我可能根本用不到 nginx 的任何相对复杂点的配置，也理解不了三层逻辑：
http - server - location。在此向诸位推荐这两篇入门介绍：
<a href="http://blog.martinfjordvald.com/2010/07/nginx-primer/">Nginx Primer</a> 与
<a href="http://blog.martinfjordvald.com/2011/02/nginx-primer-2-from-apache-to-nginx/">Nginx Primer 2 - From Apache to Nginx</a>。</p>

<p>我选的 Linux 发行版是 <a href="http://archlinux.org">Arch Linux</a>，以前有篇推介，
用到一个词：“滚动发布之美”。意思就是 Arch Linux 是没有固定版本号的，永远最新。
同时，<a href="https://wiki.archlinux.org/index.php/Main_Page">Arch Wiki</a> 文档翔实，
让我配置 FTP 与 VPN 等服务时方便许多。</p>

<p>你可能注意到，虽然这个 <a href="http://cyj.me">cyj.me</a> 是个全新的版本，但内容已经很丰富了。
它们都来自 <a href="http://blog.cyj.me">blog.cyj.me</a>，我从 2008年开始一直都在更新的博客。
但在导入的过程中，我删掉了其中一些简单的转发、短评文章，并深深自责过去写文的随意。</p>

<p>接下去的日子，就是技术、照片与其他的更新，这里再不会出现速食新闻式的各种转发了。
而 blog.cyj.me 则不再更新。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[莞尔]]></title>
    <link href="http://cyj.me/2012/03/04/jokes/"/>
    <updated>2012-03-04T00:25:00+08:00</updated>
    <id>http://cyj.me/2012/03/04/jokes</id>
    <content type="html"><![CDATA[<p>博客从2008年开始写，中间转发了许多幽默、轶闻，如今看来，很可乐，但意义不大。
今天得闲重读，便将其中篇幅较短的收集起来，统一放到这里，不单独放出了。</p>

<hr />

<p>quote from <a href="http://entertainment.slashdot.org/article.pl?sid=08/10/27/1937220">slashdot</a>.</p>

<ul>
<li>A stale piece of bread is better than nothing.</li>
<li>And nothing is better than a big juicy steak.</li>
<li>Therefore a stale piece of bread is better than a big juicy steak.</li>
</ul>


<hr />

<figure class='code'><figcaption><span>bin-laden.sh </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'><span class="nv">$ </span>chmod a+x /bin/laden
</span><span class='line'><span class="nv">$ </span><span class="c"># Every one is entitled to execute bin laden.</span>
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>达特茅斯大学计算机科学学院的
<a href="http://www.cs.dartmouth.edu/farid/research/digitaltampering/">关于王道也不可信的列表</a>。</p>

<hr />

<p>一个bs GPL 和偏执狂 RMS 的<a href="http://kuoi.com/~kamikaze/read.php?id=157">文章</a>。</p>

<p>BSD、MIT、CC 等授权似乎比所谓的 Copyleft 更受欢迎嘛。</p>

<hr />

<p>Everything that is old is new again.</p>

<blockquote><p>Two lions escape from the zoo. They decide to split up and meet back in two months to see how the other is doing.</p>

<p>Two months later, one lion is scrawny and beat up, the other is fat and happy. The scrawny beat up lion says,
&#8220;I went to the park and started eating children. The police and national guard came after me
and I haven&#8217;t stopped running since. How are you so well fed?&#8221;</p>

<p>The second lion replies, &#8220;Easy! I Just hid outside the IBM office and ate a manager every day. Nobody even noticed!&#8221;</p></blockquote>

<p>两只狮子从动物园逃了出来。他们决定分开行动，两个月后再在此地见面看看彼此过得如何。</p>

<p>两个月后，其一骨瘦如柴、挨了不少揍，另一个却显得很富态。瘦狮子说：“我跑去公园吃小孩。
被警察和太保追着打。打那以后就一直疲于奔命。你在哪混的伙食？”</p>

<p>第二只狮子回答说：“简单！我躲在 IBM 办公室外头每天吃一个中层管理人员。根本没有人注意到！”</p>

<p>这是 Slashdot 上对<a href="http://slashdot.org/article.pl?sid=09%2F01%2F22%2F1435250">微软、Intel、IBM 相继裁员的新闻</a>的回复。</p>

<p>也让我想起了老友记里头 Chandler 童鞋的那些办公室笑话。比如当同事抱怨事务繁忙、上级分派任务繁杂的时候，
他说，为啥不把通知丢到碎纸机里头，如果头头来问就说你从来没收到通知？同事当他说笑，他很严肃地自言自语，
为啥我说正经的的时候，你们老当我在开玩笑……</p>

<p>ps：该新闻说，微软与 Intel 都将裁员5k余，而 IBM 则尚未通报确切数字，据传将达到 16k。</p>

<hr />

<p>当 Steve Jobs 遇到 Donald Knuth</p>

<p>Steve 童鞋邀请到了高德纳来给 Mac 团队做个小指导。高德纳是斯坦福大学计算机科学系的传奇教授。
（还有一篇<a href="http://blog.csdn.net/g9yuayon/archive/2008/01/11/2034708.aspx">g9写在高德纳70岁时候</a>的文章也可以看。）</p>

<p>我还坐在 Steve 的办公室里头的时候，Steve 的助手 Lynn Takahashi 童鞋报传高德纳驾临。
Steve 小盆友从板凳上跳起来，赶紧开了门并伸出了欢迎的手，就差倒着穿鞋子了：</p>

<p>“见到你真高兴。” Steve 说，“你的书我都读了。”</p>

<p>“你放屁。”高德纳回答。</p>

<blockquote><p>Steve had managed to get Don Knuth, the legendary Stanford professor of computer science,
to give a lunchtime lecture to the Mac team. [&#8230;]</p>

<p>I was sitting in Steve&#8217;s office when Lynn Takahashi, Steve&#8217;s assistant, announced Knuth&#8217;s arrival.
Steve bounced out of his chair, bounded over to the door and extended a welcoming hand.</p>

<p>&#8220;It&#8217;s a pleasure to meet you, Professor Knuth,&#8221; Steve said. &#8220;I&#8217;ve read all of your books.&#8221;</p>

<p>&#8220;You&#8217;re full of shit,&#8221; Knuth responded.</p></blockquote>

<p>（此处略去高德纳介绍，详情请见<a href="http://blog.csdn.net/g9yuayon/archive/2004/07/04/33416.aspx">g9对他的介绍</a>）</p>

<hr />

<p>居家旅行杀人越货必备之注释工具</p>

<p><a href="http://www.cenqua.com/commentator/">the commentator</a></p>

<p>通过一些很囧的参数设置，让注释工具了解的你的性格，就可以开始注释了。</p>

<figure class='code'><figcaption><span>wtf.c </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">// avoid using the reverse &quot;i &gt;= 0; i--&quot; style loop here,</span>
</span><span class='line'><span class="c1">// it would obviously be more efficient, but blows up in gcc</span>
</span><span class='line'><span class="c1">// under linux and solaris</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="http://en.wikipedia.org/wiki/Fear,_uncertainty_and_doubt">FUD</a> 开太大的话就是这结果……</p>

<hr />

<p>一家大公司的计算机（故事背景在计算机还很巨大的年代）挂掉了，所以他们给维修工打了电话。
修理工在真空管架子之间走来走去，背着手哼着小曲，左看看右看看，上看看下看看。
公司经理跟在后面紧张兮兮地探头探脑。</p>

<p>过了一会，他终于在其中一个架子前停了下来。那个架子并没有什么与众不同的地方。
他拉出真空管的托盘，拿出一个来放进自己的口袋。又从自己的另一个口袋里头掏出一个新的来，
插回去。他接着把托盘推了回去，同技工说，开起来吧。</p>

<p>计算机又妥妥儿的了。</p>

<p>经理很高兴：“太好了！谢天谢地它又跑起来了！我们要给你多少钱？”
修理工说：“一千刀。”（在计算机还是真空管的年代，这钱可真不少。）
“什么？！一千块买个真空管？我要个详细的清单收据！”
修理工耸耸肩，从兜里掏出个小本，写了一会，递给经理。经理拿来一看：“真空管：一刀；找到要更换的真空管：999刀。”</p>

<p><a href="http://www.reddit.com/r/programming/comments/d10zy/forget_oracle_go_postgresql_the_worlds_most/c0wr3xv">via</a></p>

<p>难得在 proggit 上又看到这则笑话，或者说寓言，翻译一下，聊作记录。小学的时候好像看到过，不过那时候修的是别的生产设备。</p>

<hr />

<p><a href="http://twitter.com/phil_nash/status/21159419598">via</a></p>

<p>Welcome to the new decade: Java is a restricted platform, Google is evil,
Apple is a monopoly and Microsoft are the underdogs</p>

<hr />

<p>粉絲們為 JavaScript 大神發起了 Twitter hashtag <a href="http://twitter.com/#search?q=crockfordfact">#crockfordfact</a>，
有愛的“軼聞”都放在 <a href="http://crockfordfacts.com/">Crockfordfacts.com</a>。
<a href="http://crockfordfacts.com/AD9ozL4y3xGCVSxUAkuh_Q">摘錄一條</a>：</p>

<blockquote><p>Douglas Corckford can have full conversations using only javascript&#8217;s reserved words.</p></blockquote>

<hr />

<p><a href="http://www.slayerx.org/2008/02/27/linus-torvalds-facts/">Linus Torvalds Facts</a>，很 KUSO，其中一条：</p>

<blockquote><p>Linus Torvalds doesn’t wear glasses anymore not because he had laser eye surgery,
but because he finally got his xorg.conf properly configured in his head.</p></blockquote>

<hr />
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用 QUnit 做 JavaScript 单元测试]]></title>
    <link href="http://cyj.me/2012/03/01/js-unit-testing/"/>
    <updated>2012-03-01T09:30:00+08:00</updated>
    <id>http://cyj.me/2012/03/01/js-unit-testing</id>
    <content type="html"><![CDATA[<p>前一阵跟同事讲 JavaScript 单元测试该如何搞起，找了些资料，
结合自己的应用情况，说了一些，但依然说得不好。因此写篇博文，记录一下。</p>

<p>按专业做测试的童鞋们的划分，单元测试属于白盒测试。做法是，
与待测模块使用相同的程序语言，引入该模块，引入测试框架，然后噼里啪啦写一堆测试用例。
Ruby 童鞋这一点做得很好，自带了一个 <code>test/unit</code>，Rails 童鞋更进一步，在
项目根目录的 <code>test/unit</code> 与 <code>test/functional</code> 下分别会生成对应 model 与
controller 的测试类。同时还补上了一坨断言，详情请看
<a href="http://guides.rubyonrails.org/testing.html">Rails Guides 之测试</a></p>

<p>JavaScript 短小精悍，自带的东西除了各种神奇语法，啥也没有；有一堆所谓的
Juicy Libraries 可供挑选，结果经常因为想用 B 框架的甲插件，自己却已经用了
A 框架而心生惆怅。其实兼收并蓄也没什么不好，大家网速都还可以的嘛。</p>

<p>扯远了哈，我的意思是，要做 JavaScript 单元测试，第一个问题就是先得挑一个框架。
StackOverflow.com 上有人弄了个
<a href="http://stackoverflow.com/questions/300855/looking-for-a-better-javascript-unit-test-tool">详细列表</a>
，有些已经陈旧了，例如 JSUnit，有些则偏整体测试解决方案一点，例如
John Resig 做的 TestSwarm.com。</p>

<p>我们先讲语言层面的测试框架本身好了，现在用得比较多的是 JSSpec、
<a href="http://pivotal.github.com/jasmine/">Jasmine</a>
和列表中没有提到的同是 John Resig 的作品 <a href="http://docs.jquery.com/QUnit">QUnit</a>。</p>

<p>先被我排除的是 JSSpec，因为在我接触到的前端项目里头，要么没有写单元测试，
要么没有用 JSSpec，所以我一直没有见过 JSSpec 的单元测试语法是什么样的；
不过把它列入考虑的原因也简单，没有专门的测试人员的 Facebook，
写 JavaScript 单元测试用的框架就是它
（<a href="http://www.quora.com/What-kind-of-automated-testing-does-Facebook-do">来源</a>）。</p>

<p><a href="seajs.com">SeaJS</a> 与 <a href="http://docs.kissyui.com/">Kissy</a> 用的都是 Jasmine，
应该就是玉伯的偏好了。Jasmine 的语法效仿自 Ruby 里的 RSpec。
这种语法风格的宗旨是更贴近自然语言，直接从源码生成程序说明文档。</p>

<figure class='code'><figcaption><span>example.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s2">&quot;Jasmine&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s2">&quot;makes testing JavaScript awesome!&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">yourCode</span><span class="p">).</span><span class="nx">toBeLotsBetter</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>但我不太喜欢，觉得有点不伦不类的。另一个让我最终没选它的原因是，
测试输出的部分还得自己包装，好麻烦⋯⋯ 参考玉伯 SeaJS 代码中
<a href="https://github.com/seajs/seajs/blob/master/test/runner.html">runner</a>
部分。</p>

<p>所以我选了 QUnit。好啦，我终于切题了，下面讲 QUnit 的用法。</p>

<p>QUnit 包含两个文件，qunit.js 与 qunit.css，它的断言结果是输出到页面 DOM 里的，
所以基于 QUnit 写的测试，都需要有个 html 页面，引入这俩文件，并且保证页面中有这样的 DOM 节点：</p>

<figure class='code'><figcaption><span>test.html </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h1</span> <span class="na">id=</span><span class="s">&quot;qunit-header&quot;</span><span class="nt">&gt;</span>亲爱的单元测试<span class="nt">&lt;/h1&gt;</span>
</span><span class='line'><span class="nt">&lt;h2</span> <span class="na">id=</span><span class="s">&quot;qunit-banner&quot;</span><span class="nt">&gt;&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;h2</span> <span class="na">id=</span><span class="s">&quot;qunit-userAgent&quot;</span><span class="nt">&gt;&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;ol</span> <span class="na">id=</span><span class="s">&quot;qunit-tests&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/ol&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>你的测试代码应该长这样：</p>

<figure class='code'><figcaption><span>test.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;a basic test example&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ok</span><span class="p">(</span> <span class="kc">true</span><span class="p">,</span> <span class="s2">&quot;this test is fine&quot;</span> <span class="p">);</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">value</span> <span class="o">=</span> <span class="s2">&quot;hello&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span> <span class="nx">value</span><span class="p">,</span> <span class="s2">&quot;hello&quot;</span><span class="p">,</span> <span class="s2">&quot;We expect value to be hello&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;Module A&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;first test within module&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ok</span><span class="p">(</span> <span class="kc">true</span><span class="p">,</span> <span class="s2">&quot;all pass&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;second test within module&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">ok</span><span class="p">(</span> <span class="kc">true</span><span class="p">,</span> <span class="s2">&quot;all pass&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">(</span><span class="s2">&quot;Module B&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s2">&quot;some other test&quot;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">expect</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">false</span><span class="p">,</span> <span class="s2">&quot;failing test&quot;</span> <span class="p">);</span>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span> <span class="kc">true</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="s2">&quot;passing test&quot;</span> <span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>在测试页面中引入这个，就齐活了。</p>

<p>QUnit 的 <a href="http://docs.jquery.com/QUnit#Reference_Test_Suites">示例</a>
有很多，<a href="https://github.com/jquery/jquery/blob/master/test/unit/core.js">jQuery 本身</a>，
jQueryUI 的部分项目，都用这货做的单元测试。</p>

<p>基本的测试用例搞完了，接下去要考虑的事是如何
<a href="http://docs.jquery.com/QUnit#Integration_into_Browser_Automation_Tools">自动化</a>，
做持续集成。我尚无实际应用经验，先按下不表。John Resig 抱怨过
<a href="http://ejohn.org/blog/javascript-testing-does-not-scale/">JavaScript 测试的烦恼处</a>，
多平台、多浏览器测试使得一个小改动都需要大量人工去测，因此弄了
<a href="http://testswarm.com">Test Swarm</a>，对前端童鞋来说，文章很有趣，推荐一看。</p>

<p>此外，淘宝UED 的云谦童鞋，去年就搞过一个云测试项目，感兴趣的童鞋可以去了解一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[搬家到 Octopress]]></title>
    <link href="http://cyj.me/2012/02/28/move-onto-octopress/"/>
    <updated>2012-02-28T15:10:00+08:00</updated>
    <id>http://cyj.me/2012/02/28/move-onto-octopress</id>
    <content type="html"><![CDATA[<p>用 WordPress 写博客快四年了，一直有个痒处，怎么挠都不得劲，就是写文章的那框框实在是太不好用了。
后来又试过装 markdown 格式支持的插件，但不过是前端的一个包装而已，每次还得人肉去点 render，蛋疼得紧。</p>

<p>去年翻译 <a href="http://gitref.cyj.me">git-reference</a> 的时候，第一次了解了 <a href="http://pages.github.com/">Github Pages</a>
和使它所以为可能的技术基础 <a href="http://github.com/mojombo/jekyll/">jekyll</a>。
Github Pages 的中心思想是，可以建一个 yourname.github.com 仓库，在 master 分支里头放 HTML 文件，
通过 http://yourname.github.com 访问，也可以在你的项目仓库里头建分支 gh-pages，该分支里头放 HTML 文件，
通过 http://yourname.github.com/yorproject 访问。这两者都支持绑域名，在 CNAME 文件中填上域名，
在域名的 DNS 解析中加上 A 记录，指向 Github 的地址 <code>207.97.227.245</code> 就成。</p>

<p>精彩之处在于，Github 可以自动解析分支中的以标记格式为扩展名的文件，根据文件中声明的模板，
渲染出最终的结果。这就是 jekyll 做的事情：</p>

<ul>
<li>让你能够用趁手的编辑器写自己喜欢的标记格式（markdown、textile 神马的）</li>
<li>让你拥有真正的版本记录</li>
<li>无需网络就能撰写文章</li>
<li>发布之后只有静态文件，轻便快捷</li>
<li>无需数据库</li>
</ul>


<p>前两点对我尤为重要，特别是在我立志要写牛逼文章的大背景下，咳咳。</p>

<p>无需数据之类的，我的 <a href="http://cyj.me">cyj.me</a> 所用的东东，Stacey，就已经能够做到，
但它还是没脱 Web 服务的窠臼，只不过更新方式换成了 FTP 而已。但从这一点来说，更适合展现视觉方面的东东。</p>

<p>回到正题，我喜欢上了 jekyll，决定动手一试，于是翻看了篇
<a href="http://oppih.github.com/2011/12/jekyll-introduction/">很优秀的介绍</a>，看明白了大概，
但又觉得从头开始比较辛苦，恰好又发现它还提供
<a href="https://github.com/mojombo/jekyll/wiki/blog-migrations">从各种平台迁移到 jekyll</a> 的功能，
自然也包括了 WordPress：</p>

<pre><code>$ ruby -rubygems -e 'require "jekyll/migrators/wordpressdotcom"; Jekyll::WordpressDotCom.process("wordpress.xml")'
</code></pre>

<p>呃，等等，我有点跳跃了，在做上面说的事情之前，要明确一个东西：</p>

<blockquote><p>jekyll 不是记博客的软件，它是个解析引擎</p></blockquote>

<p>所以，直接拿它替换 WordPress，你会遇到与我相仿的问题，有好多功能都没有，博客的设计还需要重头来过，等等。
但幸好，套用玉伯的话说，这个世界上聪明的人很多，很多事情别人已经做了。所以我找到了
<a href="http://octopress.org/docs/">OctoPress</a>。此外也有人用
<a href="http://jekyllbootstrap.com/usage/index.html">jekyll-bootstrap</a>，丫还支持主题配置。但我并没有尝试后者。</p>

<p>现在接着说回上面的问题，直接执行上边的导入，导进来的文章内容是 html 格式的，自然不是我想要的。
所以参考了 <a href="http://blog.yorkxin.org/2011/11/26/import-from-wpcom-to-octopress/">yorkxin 的导入 gist</a>
和 <a href="http://jiangle.name/2012/02/06/switched-to-jekyll/">Jiang Le 的从 WordPress 切换到 Jekyll</a>，
并使用了 <a href="https://github.com/cousine/downmark_it">downmark_it</a> 将 HTML 转成 Markdown。</p>

<p>downmark_it 还算好用，但效果并非完美，还得略微调整一些小瑕疵。</p>

<p>我用的导入文章脚本被自己手贱删掉了，没能贴出来，灰常遗憾。</p>

<p>接着说一些细节上需要注意的，上述迁移任务并没有将评论导进来。由于是静态文件，jekyll 生成的网站也不支持评论。
但感谢 <a href="http://disqus.com/">disqus</a>，它提供了很风骚的纯 js 方式，令你的网页交互起来。更刺激人的事，
这货居然还能导入 WordPress 的评论，摆明了挖墙角啊。</p>

<p>此外，jekyll 中，categories: [&#8216;computer&#8217;, &#8216;bug&#8217;] 的概念与原先 WordPress 中的概念是不一样的。
jekyll 里，会将 computer/bug 作为一个 category，所有标记为此类目的文章都归到此处，
不会在 computer 或者 bug 类目出现。而 WordPress 里的是彼此分开的。</p>

<p>最后说一句，如果不喜欢命令行，就不要使用啦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Bootstrap 框架介绍]]></title>
    <link href="http://cyj.me/2012/01/09/twitter-bootstrap-intro/"/>
    <updated>2012-01-09T00:00:00+08:00</updated>
    <id>http://cyj.me/2012/01/09/twitter-bootstrap-intro</id>
    <content type="html"><![CDATA[<p>第一次听说 <a href="http://twitter.github.com/bootstrap/#overview">Boostrap</a> 是因为同事的 <a href="http://ruby-china.org/topics">Ruby China</a>，后来在自己负责的项目 <a href="http://ux.etao.com/">一淘UX</a>，后台部分的界面也用到了这个东东，用得有些束手束脚，因此决定把它的介绍看一遍，也给大家做个分享。</p>

<p>Bootstrap 是 Twitter 搞的一个框架，目的是有个工具可以方便快速搞起一个项目，样式部分使用 Less 写就，也提供了一些 jQuery 插件形式的扩展。对景德镇居民来说，它比较狠的是直接不支持 IE6，许多特效、属性在 IE7、8 里头也是捉襟见肘；因此，如果你的网站放不下这部分用户，还是先不要用了，或者可以参考着整一个自己的版本。Bootstrap 的代码<a href="https://github.com/twitter/bootstrap">托管在 Github</a>，随时可以 fork。</p>

<p>样式方面，它提供了如下解决方案：</p>

<ul>
<li>栅格系统</li>
<li>布局</li>
<li>字体样式</li>
<li>多媒体展现</li>
<li>表格</li>
<li>导航</li>
<li>警告与提示</li>
<li>弹出浮层</li>
</ul>


<p>栅格系统与比较著名的 960 Grid 大同小异，不过丫默认是16栏，940像素宽，此外一个特性是，因为 Less 带来的动态语言特性（变量、函数等），可以通过配置几个参数，自定义自己的栅格。因为抛弃了老旧浏览器支持，可以直接用 :last-child 将最后一栏的 margin-right 去掉，这也是它与 960 Grid 的差别之一。</p>

<p>布局也是老生常谈，一个固定宽度的居中，一个可变宽度的浮动布局。</p>

<p>字体设置里的风格比较明显，标题、em、strong、b、i 以及 address，都配了一些样式。在 blockquote 的样式里头，利用 before 属性，加上了个 &amp;dash;。然后是列表，通过 .unstyled 类，获得样式充值效果；这个方式其实我也比较喜欢，特别是网站是以内容为主的时候。代码块也比较朴素，推荐了 <a href="http://code.google.com/p/google-code-prettify/">Google Code Prettify</a>。</p>

<p>接着这个就比较贴心的了，很常用的 eye candy，内敛标签。</p>

<p><a href="http://blog.cyj.me/wp-content/uploads/2012/01/Screen-Shot-2012-01-09-at-9.35.49-PM.png"><img src="http://blog.cyj.me/wp-content/uploads/2012/01/Screen-Shot-2012-01-09-at-9.35.49-PM.png" title="Screen Shot 2012-01-09 at 9.35.49 PM" alt="" /></a></p>

<p>多媒体列表其实也比较简单，明确了三种缩略图尺寸 330x230、210x150 和 90x90。至于你的网站如何做，可能还是悉听尊便吧。表格的样式也是简约风格。</p>

<p>Bootstrap 对表单做了比较充分的定制，风格上比较明确，label 左浮动，圆角输入框。正确、错误的状态，表单 legend 的字号，前缀字符，输入、复选框等。文件选择的东东比较朴素，基本是老样子，也没有采用一些风骚的解决方案（那些基本需要与 JavaScript 配合搞）。表单的按钮也十分细致。</p>

<p><a href="http://blog.cyj.me/wp-content/uploads/2012/01/Screen-Shot-2012-01-09-at-9.42.59-PM.png"><img src="http://blog.cyj.me/wp-content/uploads/2012/01/Screen-Shot-2012-01-09-at-9.42.59-PM.png" title="Screen Shot 2012-01-09 at 9.42.59 PM" alt="" /></a></p>

<p>网站的全局导航栏，风格一以贯之，使用样式实现背景色渐变，固定在头部；同样，因为不需要考虑老旧浏览器，放心地 position: fixed; 就够了。</p>

<p>此外，还实现了提示、警告：</p>

<p><a href="http://blog.cyj.me/wp-content/uploads/2012/01/Screen-Shot-2012-01-09-at-9.45.46-PM.png"><img src="http://blog.cyj.me/wp-content/uploads/2012/01/Screen-Shot-2012-01-09-at-9.45.46-PM.png" title="Screen Shot 2012-01-09 at 9.45.46 PM" alt="" /></a></p>

<p>区块风格的消息提示：</p>

<p><a href="http://blog.cyj.me/wp-content/uploads/2012/01/Screen-Shot-2012-01-09-at-9.46.05-PM.png"><img src="http://blog.cyj.me/wp-content/uploads/2012/01/Screen-Shot-2012-01-09-at-9.46.05-PM.png" title="Screen Shot 2012-01-09 at 9.46.05 PM" alt="" /></a></p>

<p>面包屑导航：</p>

<p><a href="http://blog.cyj.me/wp-content/uploads/2012/01/Screen-Shot-2012-01-09-at-9.45.34-PM.png"><img src="http://blog.cyj.me/wp-content/uploads/2012/01/Screen-Shot-2012-01-09-at-9.45.34-PM.png" title="Screen Shot 2012-01-09 at 9.45.34 PM" alt="" /></a></p>

<p>翻页：</p>

<p><a href="http://blog.cyj.me/wp-content/uploads/2012/01/Screen-Shot-2012-01-09-at-9.56.10-PM.png"><img src="http://blog.cyj.me/wp-content/uploads/2012/01/Screen-Shot-2012-01-09-at-9.56.10-PM.png" title="Screen Shot 2012-01-09 at 9.56.10 PM" alt="" /></a>
以上是样式的部分，是 Bootstrap 框架的主打。在代码上，基本把样式重置与定制都做掉了，上述内容，出了比较明显的组件如面包屑、翻页等，基本都是直接用标签做选择器的。不过，框架就该简单直接，对吧？有许多风格是利用较新的样式属性搞出来的，最明显的莫过于背景色渐变与圆角（gradient、border-radius、box-shadow 等）。因此，对于图省事、不介意老浏览器看起来效果差些，IE6 不需要管的开发者，Bootstrap 是个好选择，省时省力，美观大方。</p>

<p>在样式之外，Bootstrap 还提供了几个常用的 JavaScript 实现的效果。模态框、提示浮层、表格的排序等等，jQuery 插件的形式。夜了，按下不表。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RMagick、MiniMagick、ImageMagick、GraphicsMagick 傻傻分不清楚]]></title>
    <link href="http://cyj.me/2012/01/05/rmagick-minimagick-imagemagick-graphicsmagick-diff/"/>
    <updated>2012-01-05T00:00:00+08:00</updated>
    <id>http://cyj.me/2012/01/05/rmagick-minimagick-imagemagick-graphicsmagick-diff</id>
    <content type="html"><![CDATA[<p>四兄弟都是 Magick 字辈的，要分清楚其实也简单。<a href="http://en.wikipedia.org/wiki/ImageMagick">ImageMagick</a> 和 <a href="http://en.wikipedia.org/wiki/GraphicsMagick">GraphicsMagick</a> 是名副其实的两兄弟，都是开源的图片处理工具，具有丰富的执行参数，艺术效果等等。后者是前者的分支，从 2002 年时的 5.5.2 版本分出来，专注软件与编程接口的稳定性。</p>

<p>而 RMagick 与 <a href="https://github.com/probablycorey/mini_magick">MiniMagick</a> 也算是两兄弟，后者比前者优势在更稳定，不容易内存泄露（That&#8217;s what they say&#8230;）。哥俩都是 Ruby Gem，是对 ImageMagick 的命令行选项的封装。中午查文档的时候瞥了一眼 MiniMagick 的些许代码，也是用的 method_missing 来搞。例如：</p>

<figure class='code'><figcaption><span>foo.rb </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'>
</span><span class='line'><span class="n">img</span> <span class="o">=</span> <span class="no">MiniMagick</span><span class="o">::</span><span class="no">Image</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="n">blob</span><span class="p">)</span>
</span><span class='line'><span class="n">img</span><span class="o">.</span><span class="n">resize</span> <span class="s1">&#39;800x800&#39;</span>
</span><span class='line'><span class="c1"># method_missing thrown, resize wrapped as an option of `convert` command.</span>
</span></code></pre></td></tr></table></div></figure>


<p>所以，基本上对着 <a href="http://www.imagemagick.org/script/command-line-options.php">ImageMagick 的文档</a>用就是了。</p>

<p>然后再提一个经常用到的实践，在 CarrierWave 的封装里头也很常见的，resize_to_fit 与 resize_to_limit，以及其他一些需求，例如我今天要做的，把图片宽度限制在 800 以内，高度不限。这种需求都可以通过 <a href="http://www.imagemagick.org/script/command-line-options.php#resize">-resize 参数</a>统统搞定。在文档里头我们看到，它说接收一个 geometry 格式的参数。那这个 geometry 参数长啥样嘞？</p>

<pre><code>scale%  Height and width both scaled by specified percentage.
scale-x%xscale-y%   Height and width individually scaled by specified percentages. (Only one % symbol needed.)
width   Width given, height automagically selected to preserve aspect ratio.
xheight Height given, width automagically selected to preserve aspect ratio.
widthxheight    Maximum values of height and width given, aspect ratio preserved.
widthxheight^   Minimum values of width and height given, aspect ratio preserved.
widthxheight!   Width and height emphatically given, original aspect ratio ignored.
widthxheight&gt;   Change as per widthxheight but only if an image dimension exceeds a specified dimension.
widthxheight&lt;   Change dimensions only if both image dimensions exceed specified dimensions.
area@   Resize image to have specified area in pixels. Aspect ratio is preserved.
</code></pre>

<p>这货定义的真是太精彩了，言简意赅，上面的那些需求都可以分别满足：</p>

<pre><code>-resize 80x80
-resize 80x80&gt;
-resize 80
-reszie 80x800&lt; # 如果刷屏金箍棒出现
</code></pre>

<p>不过话说回来，在可读性与简洁之间，确实很难做好平衡呢。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[事件代理以及它的好处]]></title>
    <link href="http://cyj.me/2012/01/03/what-is-event-delegating-and-why-you-should-be-using-it/"/>
    <updated>2012-01-03T00:00:00+08:00</updated>
    <id>http://cyj.me/2012/01/03/what-is-event-delegating-and-why-you-should-be-using-it</id>
    <content type="html"><![CDATA[<p>不是什么新东西了，昨天做的分享里头需要讲到，又把几个知识点翻出来看了一下，<a href="http://cherny.com/webdev/70/javascript-event-delegation-and-event-hanlders">这篇博客</a>总结得不错，摘译一些。</p>

<p>事件代理利用的是事件冒泡机制，在事件，例如点击触发时，是从 DOM 树最底端的阶段开始往顶端冒泡，事件对象贯穿这个生命周期。入门事件绑定的时候，绑定与处理是这样的：</p>

<figure class='code'><figcaption><span>old.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">button</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;J_button&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">button</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">e</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">event</span><span class="p">;</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span> <span class="o">||</span> <span class="nx">e</span><span class="p">.</span><span class="nx">srcElement</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// handles target</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>这在要绑定、处理的节点多了之后有点难办的，尤其是列表、表格这种场景，在 for 循环的时候，有个经典的 js gotcha：</p>

<figure class='code'><figcaption><span>wrong.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// 错误代码</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">anchors</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">anchors</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">alert</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>不管点那个锚点，alert 出来的都是 anchors.length -1，熟悉 js 的都会告诉你，这是因为闭包的关系，因为等你点击任意锚点的时候，这个 for 循环执行已毕，当前上下文，也就是 onclick 所在的闭包，里头的 i 已经是 anchors.length -1。</p>

<p>而如果用事件代理的方式，则强迫你放弃闭包中的这些循环变量：</p>

<figure class='code'><figcaption><span>delegate.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">anchors_box</span><span class="p">.</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">e</span> <span class="o">=</span> <span class="nx">e</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">event</span><span class="p">;</span>
</span><span class='line'>   <span class="kd">var</span> <span class="nx">target</span> <span class="o">=</span> <span class="nx">e</span><span class="p">.</span><span class="nx">target</span> <span class="o">||</span> <span class="nx">e</span><span class="p">.</span><span class="nx">srcElement</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">if</span> <span class="p">(</span><span class="nx">target</span><span class="p">.</span><span class="nx">tagName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span> <span class="o">===</span> <span class="s1">&#39;a&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>       <span class="nx">alert</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span>
</span><span class='line'>   <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>如果需要 i，则需要在事件处理时去实时获取，或者预处理一下，将 i 放到它们的属性里头去。两者对比，采用事件代理方式的好处显得清楚明了：</p>

<ol>
<li>绑定起来更加方便</li>
<li>减少闭包使用，从而降低可能不必要的内存占用</li>
<li>对代理节点的 innerHTML 做修改，不需要重新绑定</li>
<li>在事件监听节点比较多的情况下，特别是重型的 OPOA，跑得更顺畅</li>
</ol>


<p><a href="http://cherny.com/webdev/70/javascript-event-delegation-and-event-hanlders">参考文章</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[忐忑 2012]]></title>
    <link href="http://cyj.me/2012/01/03/looking-forward-to-2012/"/>
    <updated>2012-01-03T00:00:00+08:00</updated>
    <id>http://cyj.me/2012/01/03/looking-forward-to-2012</id>
    <content type="html"><![CDATA[<p>2012 年开始了，没有船票的我内心忐忑，不管末日与否，还有12个月要过的，给自己定几个目标：</p>

<ol>
<li>吉他接着搞起</li>
<li>每天画点小画</li>
<li>各种 webapp 搞起</li>
<li>工作上还得再接再厉，NodeJS 有必要搞起</li>
<li>理论知识得熟络，联系实际能力要加强；看一遍《<a href="http://mitpress.mit.edu/sicp/full-text/book/book.html">SICP</a>》</li>
<li>和林妹纸一起，去更多更远的地方</li>
<li>多关心家人一些</li>
</ol>


<p>不敢写具体了，怕食言而肥。努力吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[回顾 2011]]></title>
    <link href="http://cyj.me/2012/01/03/looking-back-to-2011/"/>
    <updated>2012-01-03T00:00:00+08:00</updated>
    <id>http://cyj.me/2012/01/03/looking-back-to-2011</id>
    <content type="html"><![CDATA[<p>去年果然很忙，例行的新年计划都木有，翻了翻历史，只有对 <a href="http://blog.cyj.me/archives/84376">2010 年的展望</a>，笑言希望买单反，如今快门数估计已经过万不止了，以及<a href="http://blog.cyj.me/archives/84558">对这篇展望的回顾</a>。大体上上说，2010 年完成得不错。</p>

<p>2011 年，年初没有定目标；而公司的个人 KPI 设定又略显偏工作内容了，不好提。只好按月份回顾一下罢：</p>

<p><a href="http://blog.cyj.me/archives/date/2011/01">一月份</a>前后，开始学 Ruby on Rails，之前用过的语言与框架是 Python 与 Django，转到了 Ruby 与 Rails，许多技术思想其实相差无几，但语法差别、接口细节之类，也有些恼人，磕磕绊绊，边干边学，还算顺利。一月份看了两部电影，《黑天鹅》与《How To Be》，艺术追求与自我价值的找寻，娜塔莉·波特曼与罗伯特·帕丁森各自过着拧巴的日子。</p>

<p><a href="http://blog.cyj.me/archives/date/2011/02">二月份</a>，博客里记的仍然只有技术文，中间其实有个很生活的片段，就是农历新年。正月里去怕了温州最高的山，<a href="http://www.yupoo.com/photos/yicai-cyj/albums/4813959/">金鸡山（照片）</a>，上山太早，冻了俩小时才看到日出；下山的时候第一次与别人刮擦，是个悍妇，扛不牢。这一年春节，也是大学毕业之后，工作两年多，头一回能在家待超过十天。回杭之后，还提了车，开始每天烦恼停车位。二月份看了一部电影，《非诚勿扰2》，谈恋爱是美好的，婚姻还是得一步一步来，行差踏错，麻烦得很。</p>

<p>三月份，木有记。去了一趟安徽家朋，和新安江上游，看到了许多油菜花田，看到了一棵超大的樟树。那边有个地方叫做磡头，跟我念小学时的镇上十分相似，有种穿越回九十年代的错觉。本月看了三部电影，《Gone Baby Gone》，Affleck 兄弟出品，剧情跌宕，没有了绝对的好人坏人了；《前度》，前男友前女友什么的，都是洪水猛兽；另一部是口水片，不评价。</p>

<p><a href="http://blog.cyj.me/archives/date/2011/04">四月份</a>，翻译完了 <a href="http://gitref.cyj.me/zh/">Git 参考手册</a>，很短的，领到了模样十分美帝国主义的 MacBook Pro，各种努力适应。清明的时候还去了青山湖打酱油，随便兜了兜，仰慕了一番湖边的别墅们。还去了杭州花圃、太子湾。那个时节去这些地方显得比较入时，对吧？四月份的电影十分精彩，《里约大冒险》是个很不错的 3D 动画片；《我是 Sam》是个很可爱的老爹，以及一首很萌的歌，lucy in the sky with diamond. 《将爱情进行到底》也十分有趣，尤其是在五菱里头车震被交警拖走那段。</p>

<p><a href="http://blog.cyj.me/archives/date/2011/05">五月份</a>，记的只有两件事情，喜欢的两个球队都完败，曼联挂了，湖人也挂了。不过我久不打大球，又不喜做个纯球迷，得勉励自己要么索性不看，要么得开始篮球、足球择一恶补了。其间在枫华府第的单身公寓小住了几日，走路去上班的感觉真好，晚上不睡觉，<a href="http://www.yupoo.com/photos/yicai-cyj/archives/date-taken/2011/05/22/">跑去拍夜景</a>。五一的时候，还开车回了趟家，第一次跑告诉，回来的时候一个人，开得有点累，但感觉也不坏。和老鸭、九九去了西溪湿地，还去了老余杭那边的薰衣草园（其实不是薰衣草，学名叫啥忘记了）。车子首保。五月的电影精彩纷呈，《国王的演讲》、《玫瑰人生》、《不一样的天空》、《危情三日》、《速度与激情5》都很值得一看。</p>

<p><a href="http://blog.cyj.me/archives/date/2011/06">六月份</a>是个惊悚的月份，因为<a href="http://blog.cyj.me/archives/84594">女朋友要毕业了</a>，很庆幸现在还在一起。六月份有一部电影很值得看，《打擂台》，很有令我心折的港味。</p>

<p>七月份啥也没记，女朋友返家过最后一个暑假。去参加了 iConference，了解些 iOS 开发相关的东西，但到底没能立马动手开始做起来；回家赴飞腾订婚的宴席，就在我坐 D3115 回家两天之后，这班车与 D315 发生追尾，举国震惊。这月还有个很囧的事情，喝醉酒把自己手机搞挂了。</p>

<p><a href="http://blog.cyj.me/archives/date/2011/08">八月份</a>，小兹兹被刮擦，对方全责，这人是我见过态度最好的车主了。爸爸妈妈和妹妹来杭州小住，陪我过暑假，待了一个星期多些，感觉家里从里到外新了一圈，真正的蓬荜生辉；女朋友也返杭了，送了我一只<a href="http://www.yupoo.com/photos/yicai-cyj/82627305/">摇头狗狗</a>，作七夕礼物。<a href="http://www.yupoo.com/photos/yicai-cyj/archives/date-taken/2011/08/">更多8月照片，在这里</a>。这一月，《哈利·波特》系列完结，变形金刚出到3，还补看了《斯巴达克斯·血与沙》。</p>

<p><a href="http://blog.cyj.me/archives/date/2011/09">9月份</a>，《钢的琴》是一部触动人的电影，亚马逊发布了新版的 Kindle，而我则趁着中秋小长假，和女朋友<a href="http://blog.cyj.me/archives/84607">去了趟南浔和乌镇玩</a>，照片<a href="http://www.yupoo.com/photos/yicai-cyj/archives/date-taken/2011/09/">请看这里</a>。又回了趟家，大林伟订婚；后来还跟老鸭去了趟滨江的垃圾街，烧烤狠不错，偶尔吃一顿，感觉很好。</p>

<p>十月份，又回了趟家，项目发布，<a href="http://www.yupoo.com/photos/yicai-cyj/archives/date-taken/2011/10/23/">烟花节</a>，去了趟之江玩，夜晚的时候遇到一只很萌的猫，后悔没有带回家。部门组织架构调整，成了一淘-UX-广告组的成员，大老板是个有趣的人。这个月，我24岁了。</p>

<p>十一月，<a href="http://blog.cyj.me/archives/date/2011/11">同学们各种婚礼</a>，本科室友，高中同桌、公司同事，都有结婚、订婚，送红包不迭。<a href="http://www.yupoo.com/photos/yicai-cyj/archives/date-taken/2011/11/">拍了许多照片</a>，看到新郎官落泪，致辞的时候哽咽，被触动了。月底的时候，女友的妈妈来杭，接到家小住两日，做司机载着两位女士在杭州各处跑，第一次发现<a href="http://www.yupoo.com/photos/yicai-cyj/archives/date-taken/2011/11/26/">秋天的杭州（照片）</a>这么美。</p>

<p>十二月，刚过去，给女朋友庆生，第一次喝好贵的茶，吃好贵的蛋糕，去许多没去过的店（三润居、21客、<a href="http://www.yupoo.com/photos/yicai-cyj/archives/date-taken/2011/12/11/">马灯部落</a>、如拉小镇、BetaCafe、知味观、野鱼馆和台州小吃）。弄坏了 Kindle 屏幕，又花400块换了块新的，然后效果似乎有差。另一个项目上线，但都还忙于各种调 bug。</p>

<p>流水账的 2011 年，生活上一片忙乱，工作上也好不到哪儿去。然而毕竟没到求稳的阶段，还得再努努力，多快好省，搞定工作，享受生活才是。</p>

<p>明天找时间想想 2012 年该如何吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[nginx 的请求大小限制]]></title>
    <link href="http://cyj.me/2011/12/19/nginx-request-size-limit/"/>
    <updated>2011-12-19T00:00:00+08:00</updated>
    <id>http://cyj.me/2011/12/19/nginx-request-size-limit</id>
    <content type="html"><![CDATA[<p>项目里头有文件上传的功能，测试的时候，上传大文件都没有问题的，结果发布到测试环境和线上，就都挂掉了。很奇怪，Rails log 里头 POST 请求都木有，第一反应是 Flash 上传组件的问题，或者是 crossdomain.xml 的缘故。前者因为开发环境木有问题，排除；后者也因为 swf 文件、请求地址、页面地址都是在 / 下，也排除。</p>

<p>排除这俩，自然就觉得整个世界崩溃了，出了人品与长相还有别的原因么？</p>

<p>结果晚饭的时候顺便跟同事提起，他讲到 nginx 可能会限制请求大小，恍然大悟，于是给<a href="http://forum.slicehost.com/comments.php?DiscussionID=1714">配置文件</a>加上：</p>

<pre><code>client_max_body_size 4M;
</code></pre>

<p>或者你需要的更大的尺寸。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近二三事]]></title>
    <link href="http://cyj.me/2011/12/17/lately-27/"/>
    <updated>2011-12-17T00:00:00+08:00</updated>
    <id>http://cyj.me/2011/12/17/lately-27</id>
    <content type="html"><![CDATA[<p>来了淘宝之后生活变忙乱了，应付工作之余很难有闲情逸致自省，也没有收拾心情的想法，骚文写得自然也少了。今天难得来到贝塔咖啡小坐，变摸出电脑扮文青，叨叨一点想法，记一些近况。</p>

<p>2011年很忙，开头是第一次接手已有项目钻石展位，中间是学习新技术 Ruby on Rails，结尾则是各种学晓的前、后端技术运用，做了俩项目。单枪匹马做项目的感觉很独特，有些时候可以自作主张，有些时候需要屈从产品经理或者老板的想法，无论如何，看到最终页面从浏览器里打开的样子，心里都是有成就感的。心里想到的却是一句话，成功就是机会遇到准备。老板已经给了机会，而我想我做的准备还算不错。</p>

<p>然而这一年遇到的事情是之前所未曾预料的，2009年我做的最多的事情，是用 Python、Django 和 jQuery 制作各种玩具网站，而2010年的上半年，却是用 Flex 开发一个在线报表定制工具。或许真的如大牛们所说，技术是相通的，我学晓的，其实更多的是 DOM 结构、网站开发的各种最佳实践、ECMAScript 的精粹，和各种开发、除虫思路。Linus 大大说过的一句话我记忆犹新，这种随便乱调，不停刷新，以期解决问题的做法是极不可取的，我们更需要的，是从根本上厘清思路，找到原由，再去解决问题。按这个标准，我做的还远未足够。</p>

<p>貌似总结过头了，先说写近况吧。有个新项目上了，<a href="http://ux.etao.com/">一淘UX规范平台</a>，是个展示同事们工作成果的地方，做得仓促，连浏览器兼容都还木有做。所以如果围观的时候遇到疑难，请务必在此留言，或者私信我，可别利用漏洞做坏事。</p>

<p>车子开了9个月，居然已经1w多公里了，跟人刮擦有过、被人追尾有过，自己开得奔放有过、超速有过，甚至还有一次被人溜坡顶到车头，被动地爆了前车的菊花，所以总体还算精彩，不枉此1w公里。</p>

<p>前些天，是女友生日，花了些心思，想来点惊喜，最终还是没能完成，希望可以在农历新年之前做好，聊表心意。</p>

<p>啊，这文章写得虎头蛇尾了，另起一篇，小结一下毕业这三年余。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 获取 Iframe 内容高度]]></title>
    <link href="http://cyj.me/2011/12/17/javascript-get-the-contentHeight-of-iframe/"/>
    <updated>2011-12-17T00:00:00+08:00</updated>
    <id>http://cyj.me/2011/12/17/javascript-get-the-contentHeight-of-iframe</id>
    <content type="html"><![CDATA[<p>页面中，有需要 iframe 嵌入的内容，因为是同源的内容，所以可以使用 JavaScript 操作起来，希望可以获取它需要的高度，修改 iframe 标签的 height，以去掉滚动条，让嵌入看起来更自然一点。</p>

<p>stackoverflow 上果然已经有了不少<a href="http://stackoverflow.com/questions/819416/adjust-width-height-of-iframe-to-fit-with-content-in-it">关于这个问题的问答</a>，翻看一遍，总结解决办法如下：</p>

<figure class='code'><figcaption><span>iframe.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">frame</span> <span class="o">=</span> <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s1">&#39;#frame&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 在 iframe onload 事件触发之后再执行：</span>
</span><span class='line'><span class="nx">frame</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">win</span> <span class="o">=</span> <span class="nx">frame</span><span class="p">.</span><span class="nx">contentWindow</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">doc</span> <span class="o">=</span> <span class="nx">win</span><span class="p">.</span><span class="nb">document</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">html</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">documentElement</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">body</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">body</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// [获取高度](http://stackoverflow.com/questions/1145850/get-height-of-entire-document-with-javascript)</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">height</span> <span class="o">=</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span> <span class="nx">body</span><span class="p">.</span><span class="nx">scrollHeight</span><span class="p">,</span> <span class="nx">body</span><span class="p">.</span><span class="nx">offsetHeight</span><span class="p">,</span>
</span><span class='line'>                           <span class="nx">html</span><span class="p">.</span><span class="nx">clientHeight</span><span class="p">,</span> <span class="nx">html</span><span class="p">.</span><span class="nx">scrollHeight</span><span class="p">,</span> <span class="nx">html</span><span class="p">.</span><span class="nx">offsetHeight</span> <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">frame</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;height&#39;</span><span class="p">,</span> <span class="nx">height</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">frame</span><span class="p">.</span><span class="nx">setAttribute</span><span class="p">(</span><span class="s1">&#39;src&#39;</span><span class="p">,</span> <span class="nx">frame</span><span class="p">.</span><span class="nx">getAttribute</span><span class="p">(</span><span class="s1">&#39;data-src&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>这俩结合起来，就是我最终采取的方式啦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[定制 Authlogic 的错误信息]]></title>
    <link href="http://cyj.me/2011/12/17/custom-authlogic-error-message/"/>
    <updated>2011-12-17T00:00:00+08:00</updated>
    <id>http://cyj.me/2011/12/17/custom-authlogic-error-message</id>
    <content type="html"><![CDATA[<p>Authlogic 是 Rails 项目中比较常用的 Gem，用来方便添加账户系统，登陆校验、密码哈希，都一并做掉了，Redmine 似乎也用的它。有个不足处是，HTTPS 的方式比较麻烦，还需要许多额外的工作。</p>

<p>另一个经常需要改动的是它的<a href="http://rubydoc.info/github/binarylogic/authlogic/master/Authlogic/I18n">错误提示信息</a>，其实可以在 locale 中很方便地定制，在 config/locales/zh.yml 里头复制进</p>

<figure class='code'><figcaption><span>en.yml </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">authlogic</span><span class="p-Indicator">:</span>
</span><span class='line'>    <span class="l-Scalar-Plain">error_messages</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">login_blank</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">can not be blank</span>
</span><span class='line'>      <span class="l-Scalar-Plain">login_not_found</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">is not valid</span>
</span><span class='line'>      <span class="l-Scalar-Plain">login_invalid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">should use only letters, numbers, spaces, and .-_@ please.</span>
</span><span class='line'>      <span class="l-Scalar-Plain">consecutive_failed_logins_limit_exceeded</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Consecutive failed logins limit exceeded, account is disabled.</span>
</span><span class='line'>      <span class="l-Scalar-Plain">email_invalid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">should look like an email address.</span>
</span><span class='line'>      <span class="l-Scalar-Plain">password_blank</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">can not be blank</span>
</span><span class='line'>      <span class="l-Scalar-Plain">password_invalid</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">is not valid</span>
</span><span class='line'>      <span class="l-Scalar-Plain">not_active</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Your account is not active</span>
</span><span class='line'>      <span class="l-Scalar-Plain">not_confirmed</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Your account is not confirmed</span>
</span><span class='line'>      <span class="l-Scalar-Plain">not_approved</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Your account is not approved</span>
</span><span class='line'>      <span class="l-Scalar-Plain">no_authentication_details</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">You did not provide any details for authentication.</span>
</span><span class='line'>      <span class="l-Scalar-Plain">general_credentials_error</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Login/Password combination is not valid</span>
</span><span class='line'>    <span class="l-Scalar-Plain">models</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">user_session</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">UserSession (or whatever name you are using)</span>
</span><span class='line'>    <span class="l-Scalar-Plain">attributes</span><span class="p-Indicator">:</span>
</span><span class='line'>      <span class="l-Scalar-Plain">user_session</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">(or whatever name you are using)</span>
</span><span class='line'>        <span class="l-Scalar-Plain">login</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">login</span>
</span><span class='line'>        <span class="l-Scalar-Plain">email</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">email</span>
</span><span class='line'>        <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">password</span>
</span><span class='line'>        <span class="l-Scalar-Plain">remember_me</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">remember me</span>
</span></code></pre></td></tr></table></div></figure>


<p>然后提供你自己的翻译就成了。记得项目的 locale 设成 zh 吧。其他语言，自然照搬即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[毕业三年余]]></title>
    <link href="http://cyj.me/2011/12/17/been-graduated-for-more-than-3-years-now/"/>
    <updated>2011-12-17T00:00:00+08:00</updated>
    <id>http://cyj.me/2011/12/17/been-graduated-for-more-than-3-years-now</id>
    <content type="html"><![CDATA[<p>离开学校已经三年半了。今天坐到贝塔咖啡，看到 BetaCafe.GFW，不禁想到08年闹运的时候每天回家看看 youtube 的日子。那会儿抱个300块的吉他，看着各路大神玩那六根弦，日子过得简单纯粹。</p>

<p>毕业的时候选公司，并没有做足够的考量，仓促签了一家给外企做外包的公司，做大学里学过的 J2EE 的东东，有点无可无不可混碗饭吃的意思。去了之后，接触了些其他的，做财务报表，学了点 Actuate Basic，又勉强应用上了一些大学时学过的 Perl，又突然要开始学 Flex 开发。恰逢经济危机，资本主义人人自危，母公司不招新人了，于是有什么新项目要人，便把我们这些最后进去的，调来调去，写过样式，又改过 C 写的项目，也写过 Perl，做 SQL 的批处理。</p>

<p>如果木头看到我描述的这段经历，可能会说，讲技术名称太过枯燥乏味，真要说明问题，得说具体项目。然而我的记忆里头，竟然只剩这些苍白的名头了，对实际项目，我并未着意，并且实情如此，做得多的，只是技术运用，许多细枝末节、架构模式之类，并没有轮到我辈研究。</p>

<p>09年的时候，我开始学 Python 和 Django，同时接触 Google App Engine。那个时候天天看 Reddit 和 YCombinator，是个很潮很追新然而实际经验了了的土鳖程序猿。后来又开始看国内的各大公司的 UED，自然也包括我的现东家，淘宝网，的 UED 博客。那会的任务是修改 SQL，前东家有许多财务报表要跑，有许多 SQL 查询语句是专人维护的，它们有个共同点是都很长，同时长得都差不多。因为其格式还算正规，而需求往往是找出有区别的字段，或者添加 schema 等小调整，但又需要大量人力的工作，我终于劝自己用 Perl，贯彻懒人追求一劳永逸的程序猿美德。</p>

<p>后来此间事了，回到吴老板手下，做的是一个 Flex 项目，那时候觉得这玩意的 API 真有点浩如烟海，各种控件，傻傻分不清楚。现在看来，眼界有点小了，同时也觉得，封装得太多，牺牲了太多效率。尤其是在当时我们那个项目，需要构建、重绘的控件太多，很难保证效率。也难怪现在的 <a href="http://banner.taobao.com/">BannerMaker</a>，使用纯 ActionScript 开发。</p>

<p>总体来说，在前东家，是个努力做好眼前事，有空便学习新技术的阶段，然而因为广而不专，反而觉得在前东家前途渺茫，不合自己脾胃了。其实，说到底是自己心浮，不愿专精一门罢了。</p>

<p>所以，在此感谢李老板、吴老板和陈老板，也感谢宙贻、小麦、克凡、标哥、Tracy、ZP、豪哥、瞎抖哥、自敏、焕焕、飞哥等等等等同事们，还有我没写出来的诸位，能与你们公事是我的幸运，我学到了许多。</p>

<p>觉得对前端、对 Web 更感兴趣之后，我开始找新东家，在杭州的阿里系，尤其是在城西的两家自然是我的最大选择。我先给淘宝 UED 投了份简历，有了次电话面试的机会，然而彼时我对所谓前端技术，并没有太多深究，用过 jQuery，学过语言精粹，而运用场景却是 ActionScript 的开发，不太给力。那时候电话面试官问我觉得淘宝首页怎么样，我的回答是，那个大类目好烦。牛头不对马嘴，自然悲剧。后来是支付宝，过了技术面，有个主管面我，扯点七七八八，似乎在对我当时的东家是不是外包公司上起了分歧。彼时的我对这些不太关注，而他的说法是对的，可能由此被鄙视吧。</p>

<p>然而后来我还是来了，不是淘宝 UED，而是 <a href="http://ued.alimama.com/">MED</a>，现在的<a href="http://ux.etao.com/">一淘 UX</a> 广告组。按先后顺序，面我的是克良、亮亮、小banner，和超凡大大，还有个闻味官，她说我是个小愤青。</p>

<p>以上是工作，再说点生活上的事情吧。</p>

<p>毕业后，我突发奇想开始学吉他，学晓了一些基础知识，然而认识妹纸+来到淘宝之后，不自觉的就荒废了；我画了一些画，然而很难花精力专注在一个作品上面去，大多潦草，不够精致成熟；我住到了五常，成了郊区人士，不过我也从来木有城里过，并无所谓。</p>

<p>三年里头，凭着08年底跟妹纸的一句戏言，“从望月吃到上城区”，我们吃了许多地方，可能是街边的小面馆（忠儿面馆），也可能是景区的死贵死贵茶楼（大兜路的三润居），有好吃的有不好吃的，但凭着易满足的性格，大部分还是满意的。有了自己的家之后，也开始自己做菜，有烧焦的也有没烧焦的，基本按菜谱来的都画虎不成反类犬，但也能凑合吃。今天看到张公子的文章，《<a href="http://blog.tianya.cn/blogger/post_read.asp?BlogID=38484&amp;PostID=37574796">爸妈与我们耗费的时光，有意义吗？</a>》，让我想到了跟妹纸在一起度过的每个周末，可能并没有所谓的成就感、或者生产力补充，然而这些时光，才是人生真正重要的所在。</p>

<p>所以这三年半，我觉得自己找到了适合自己的工作，也找到了一个觉得共度此生也不坏的妹纸；社会这所大学，很不赖。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[最近二三事]]></title>
    <link href="http://cyj.me/2011/11/24/lately-26/"/>
    <updated>2011-11-24T00:00:00+08:00</updated>
    <id>http://cyj.me/2011/11/24/lately-26</id>
    <content type="html"><![CDATA[<p>最近结婚的同事、同学很多，两个月包了5个红包，囊中原本就局促，于是变得愈发羞涩。在有足够能力之前，过着超出承受范围的日子，自然会觉得累。房贷+车子带来的消耗，确实让我有些吃不消了。或者可以换个说法：匹夫！自己孬就孬，把麻烦推给周遭作甚！钱不够？去赚不就是了！</p>

<p>这或者就是天秤座的性格，一边埋怨时间不够，一遍仍不管不顾想要尽善尽美。生活如此，工作也不外如是。新近有个项目，<a href="http://ued.alimama.com/lib">MED 规范库</a>的升级版，原本一直预订着就是我来做，但是因为我的<a href="http://chuangyi.taobao.com/p4p">主打项目</a>东西太多，已经牵扯进来两位同事一起开发了。就在这当口，我还是希望东西可以更完美一些，选择放弃已有项目中一些可行但令我觉得十分不爽的做法。</p>

<p>例如，老项目中有个文章历史记录的功能，实现方式是每次都在数据库里头保存新一份数据；而趁着新版开发，想要做的事情是，通过 Grit，直接把后端换成 git，避免重复造轮子（并且肯定不会有 git 好）。然而这样做很难。</p>

<p>这周一，是我高中两位同学订婚，一位同学结婚的日子。订婚的童鞋，一个是同桌两年的姑娘，一个是室友；印象中他们高中就在一起，现在说起来，起码也有七八年了吧。看到各位童鞋们纷纷找到人生伴侣，开始过白天举案齐眉，晚上埋头造人的日子，令我十分唏嘘。我一直贪着比大部分童鞋都小一岁，任由着自己拖沓的性格。</p>

<p>所以上周日我便赶回去，从古荡等出租车，到从南站出发，花了4个小时；从南站出发，到抵达瑞安，也花了四个小时。杭州的交通你还敢再屎一点不？回到家，晚上十点多，小姨还在跳绳，妈妈还在等我。给我煮了碗面。跟我聊七七八八的事情。我说囊中羞涩，她说，童鞋们都结婚了，你看着没感触啊？你跟你女朋友认识也蛮久了摸，有些事情要是想提，得让你自己起头的。她开了这个头，自然不会见好就收，又说，要是年底就像打金给她，我现在就把钱给你吧。</p>

<p>想着这紧赶慢赶的日子，我可不由得有些慌，这要是订了婚，下一步指定又催我结，再下一步就催着生娃。所以我得为订婚赚钱，为结婚赚钱，为娃赚钱。我tm自己也想花点钱的啊⋯⋯</p>

<p>我埋头吃面，在心里咀嚼上边这些话，只好说，是挺久了，我也没有耍流氓的意思，就希望你别催我，再等等好不好？</p>

<p>这是关于结婚的事情。然后还是交代其他吧。有了相机之后，参加婚宴变得有趣了，别人交流房、车、工作，我只管把众生拍成二进制，然后等着回到家，导入电脑，丢到 http://yicai-cyj.yupoo.com/，让诸位能够看看别人眼中的自己。当然，希望是绝无任何褒贬。不过每到拍姑娘我都会落力一点，个人好恶，很难脱离开去吧。</p>

<p>画小画一直在持续，成了我工作之余的调剂，开会的时候、想问题的时候，画几张脸。晚上落班回家之前，找出女朋友的照片，画个几张，也颇有成就感，能够给我工作上可能缺乏的正反馈，让心态平和一点。然而成果良莠不齐，很少会贴到又拍去。</p>

<p>吉他是真的很久没碰了，在淘宝养成了8、9点才回家的烂习惯，回到家自然啥也不相干，要么看小说要么上网要么玩游戏，我要忏悔。或者直接写到来年的 KPI 里头去吧！</p>

<p>接着说婚礼。上上周末，是我本科室友结婚的日子。他是湖州德清人，在杭州的我们仨室友，便相约着开车去湖州，还应邀带上面具，陪他做开场舞。这是我第一次全程参与一场婚礼，从新郎家出发，去接亲，闯关，会新郎家，又去宴会厅，彩排，到最后开场，表演，再看着两位新人款款走到舞台正中。这让我觉得，缺了牧师，关系也不大嘛。</p>

<p>去的时候走的国道，还迟到罚单一张，第一次超速被拍，啊不是，超速第一次被拍。</p>

<p>以上，便是我的近况。nothing fancy, nothing special. just happened to be so.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[项目发布、Ruby Gems、Bundler 与伟大的墙]]></title>
    <link href="http://cyj.me/2011/10/21/ruby-gems-bundler-and-the-great-wall/"/>
    <updated>2011-10-21T00:00:00+08:00</updated>
    <id>http://cyj.me/2011/10/21/ruby-gems-bundler-and-the-great-wall</id>
    <content type="html"><![CDATA[<p>敝人在做的一个小项目，有一些些小改进，经过一番测试，于昨日开始上线。项目用的 Ruby on Rails，并依赖一系列 <a href="http://rubygems.org/">Ruby Gems</a>，为了方便后续的 1.8 -> 1.9 转换，并保证两边不耽误，1.8 的紧急除虫之类的工作能够照常进行，又加了 <a href="http://beginrescueend.com/rvm/install/">RVM</a>（Ruby Version Manager？）。在自己的机器、测试环境里头看看，一切正常，今天 <code>cap production deploy</code> 的时候，挂了无数次，回滚了无数次，到刚刚，可算是成了，现记录血泪史如下。</p>

<p>前几次失败，是自己 naive 了，忘了给产品环境安装 RVM，又忘了在 RVM 里头装需要的 Ruby 版本，以及它的 gemset，1.8.7@my-awesome-project。这导致项目里的 <a href="http://beginrescueend.com/workflow/rvmrc/">.rvmrc</a> 执行出错了。贪图方便，我在项目里配置了 .rvmrc。生成它的方法很简单：</p>

<pre><code>$ rvm --rvmrc --create 1.8.7@my-gemset
</code></pre>

<p>就可以了。不过这里有个 git 带来的问题。我全局开启了 cr 自动转成 crlf，结果 .rvmrc 在转掉之后，bash 执行出错了，不认得 ^M 字符。因为 bash 脚本实在不熟，只好含泪先把 crlf 关关掉，凑合用一下先。</p>

<p>再说回到产品环境的解决，自然就是安装 RVM，然后安装 bundler。在这个原以为柳暗花明的时候，伟大的墙出现了，<code>gem install bundler -v 1.0.21</code> 一直超时，等了半个早上都装不好。无奈之下，只好在本机翻墙出去，搞到了 bundler-1.0.21.gem，sftp 登到产品机器，放上去，再安装：</p>

<pre><code>$ curl http://rubygems.org/downloads/bundler-1.0.21.gem
$ sftp foo@hawlscastle.com
$ &gt; put Downloads/bundler-1.0.21.gem
$ ssh foo@hawlscastle.com
$ bundle install --local
</code></pre>

<p>原本呢，直接从 rubygems.org <code>bundle install</code> 肯定也是不行的；幸好之前做了 <code>bundle package</code>，把所有依赖的 gem 都写到了项目的 vender/cache 目录，如此，总算是在墙内完成了这些事情。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[近期遇到的一些 Bug 汇总]]></title>
    <link href="http://cyj.me/2011/10/13/bugs-bumped-into-recently/"/>
    <updated>2011-10-13T00:00:00+08:00</updated>
    <id>http://cyj.me/2011/10/13/bugs-bumped-into-recently</id>
    <content type="html"><![CDATA[<p>项目里头，用户保存一份设计的时候，会合并多份 JavaScript 文件。这些文件都是 <a href="http://seajs.com/">seajs</a> 模块，过程中，会根据模块中声明的依赖关系，自动添加相应的文件到合并的文件中去。依赖声明的形式是数组，类似：</p>

<pre><code>define('foo', ['a','b','c'], function(require, export){});
</code></pre>

<p>代码实现得很容易，之前也一直没有问题。然而最近一个模块因为依赖太多，出了麻烦。那个模块被 Closure Compiler 压缩之后，成了这个样子：</p>

<pre><code>define("foo","a,b,c".split(","), function(require, export){});
</code></pre>

<p>之前根据 [] 寻找依赖数组的，就挂掉了。Closure Compiler 这里的压缩策略是，如果用 &#8220;,&#8221;.split(&#8220;,&#8221;) 这种，能够比之前的语句压缩后要短，就改成这种。算是一个 gotcha，记在这里。</p>

<p>另一个问题，是略有些粗苯的，代码如下：</p>

<figure class='code'><figcaption><span>wrong.js </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">define</span><span class="p">(</span><span class="s1">&#39;a&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;b&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">require</span><span class="p">,</span><span class="nx">exports</span><span class="p">){});</span>
</span><span class='line'><span class="nx">seajs</span><span class="p">.</span><span class="nx">use</span><span class="p">([</span><span class="s1">&#39;a&#39;</span><span class="p">],</span> <span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">a</span><span class="p">.</span><span class="nx">foo</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>结果 <a href="https://developer.mozilla.org/en/document.write">document.write</a> 锁住了 DOM 树，seajs 在尝试解决 a 模块的依赖，在 head 中加入 <script src="b.js"></script> 的时候卡住了。比较奇怪的是，即使调用了 document.close(); 也不行。下次 debugger 看一下⋯⋯</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卡内基·梅隆大学（CMU）的脸部识别实验]]></title>
    <link href="http://cyj.me/2011/09/29/facial-recognition-experiment-brought-by-cmu/"/>
    <updated>2011-09-29T00:00:00+08:00</updated>
    <id>http://cyj.me/2011/09/29/facial-recognition-experiment-brought-by-cmu</id>
    <content type="html"><![CDATA[<p><a href="http://www.heinz.cmu.edu/~acquisti/face-recognition-study-FAQ/#Q1.1">CMU 的脸部识别实验</a>，看了 FAQ 的小结部分，我已经后脊背发凉了 >_&lt;</p>

<p>利用 SNS、网络相册等可采集的数据，进行脸部识别、数据挖掘，找出每个人在网络上的各个脚印，又做一个手机应用，拍拍TA的脸，就能找到TA的人人网、豆瓣、又拍、微博，手机号神马的，就手到擒来了</p>

<p>实验一：从红娘网站（用户多用的假名）找图片，到 facebook 找公开的用户（不用登陆到 Facebook 就能访问的）照片，彼此比对，卓有成效（木有说具体成功率）</p>

<p>实验二：线下到线上的识别，拍学生的照片，线上找相应的 Facebook 资料，成功率 1/3</p>

<p>实验三：（概念验证）增强现实，根据之前采集的数据与脸部识别结果，预测实验对象的社保号、兴趣、爱好、婚恋状况</p>

<p>到时候，真的就是龙珠里头那种眼镜的感觉，看见一个美女，一按按钮，哇，36D、刚分手诶，有机会。</p>

<p>当然，目下脸部识别技术还没有牛逼到那种程度，只是应用到社交网站，或者应用程序。Google 收购了 Neven Vision、Riya 和 PittPatt，在 Picasa 里加入了脸部识别；Apple 也收购了 Polar Rose，对 iPhoto 做了相同增强；Facebook.com 则授权了 Face.com 采集、识别它的用户数据。给定足够的时间、资源，相信不久将来，会出现这种增强现实的应用的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Amazon 与它新发布的 Kindle 们]]></title>
    <link href="http://cyj.me/2011/09/29/amazon-and-its-new-kindle/"/>
    <updated>2011-09-29T00:00:00+08:00</updated>
    <id>http://cyj.me/2011/09/29/amazon-and-its-new-kindle</id>
    <content type="html"><![CDATA[<p>Amazon 真是家<a href="http://en.wikipedia.org/wiki/Amazon.com">有趣的公司</a>哇。在线卖书起家，因为感觉错过互联网淘金热和急火火加入，一路上扩张、收购，不好好做电子商务这份有前途的工作，还非得搞出些七七八八的云服务，什么存储服务（S3）啦，云计算（EC2）啦，最近又搞了亚马逊·擎天柱（Amazon Prime）搞影音流媒体服务。与之搭配的，就是今天要说的<a href="http://www.amazon.com/Kindle-Touch-Wi-Fi-Ink-Display/dp/B005890G8Y">这些 Kindle 们</a>。</p>

<p>我在去年入了一个，6&#8221; 的 Kindle 第三版，无 wifi 版本。拿到手第一感觉是，这货真轻啊，跟地摊货似的，点亮屏幕就马上被 hold 住了，真真确确的在看书的感觉。后来就去下各种 pdf、epub，用 calibre 转了发到 kindle 上去看；也用一些服务例如 <a href="http://www.instapaper.com/">read later</a> 啦，<a href="http://www.readability.com/">readability</a> 啦之类的，将网文发到这台 kindle 上看；也会去 Amazon 上买些版权过期的、免费的书来看。</p>

<p>有“商务人士”指出，买个 Kindle 却不高兴买正版书看的人，都活该被鄙视。唔，确实 not fashion。</p>

<p>然而等不及我悔悟，Amazon 又重磅出击，把产品线更新、扩大了。昨日发布，一下多了好些个版本：去掉主键盘、只保留按键的 Kindle；增加了触屏、也去掉了所有按键的 Kindle Touch，当然，分有无 3G 的版本；老款成了最贵的，改名叫 Kindle Keyboard，这货的主键盘我从来没用过，真心不好用啊，屏幕反馈太慢，打字的乐趣分文没有了；然后就是当当当！Kindle Fire，一个彩屏的 Kindle 诶！</p>

<p>等等，说了这些个，价格多少？把他们都加起来（总共六个 Kindle），唔，差不多比最贵的 iPad（64GB+3G）还要便宜个几十刀的样子。这个公司的思路可真够清晰的，公司创始人 Jeff Bezos 曾说过这么一句话：</p>

<blockquote><p>There are two types of companies: those that work hard to charge customers more, and those that work hard to charge customers less. Both approaches can work. We are firmly in the second camp.</p>

<p>有两种公司：努力让顾客多付钱的其一，努力让顾客少付的其二。两种公司都可以成功。我们坚决待在第二种阵营。</p></blockquote>

<p>内容为王呃。它是如此不遗余力，不惜给产品加入广告以使成本更低。加入广告的版本换做 Special Edition，特别版。好么，人家的特别版都是限量、高价，它这特别版是特别便宜的版本的意思。广告在锁屏的时候出现，什么团购之类的，居然反馈还不错，也绝不影响阅读。而这次新品发布，直接把这特别版当成主推的，想要没广告的呀，可以呀，加钱⋯⋯ 真心想让设备烂大街，人手一只才好吧。另一种烂大街的，就是努力让顾客多掏钱的 Apple，同学几个出去聚会，摸出来的 5/6 是 iPhone，4k 多的手机哇。</p>

<p>而这种竞争，首先搞挂的估计是国内的这些个汉王、盛大 Bambook 这些定位不清楚的吧。要卖设备，做得不如 iPad，要卖内容，又扛不住国内的盗版环境。都只能抱团在那边喊喊国情不一样的咯。</p>

<p>不过，这只是我猜。不管如何，年底，或者明年年初，打算入一个 Kindle Touch。</p>
]]></content>
  </entry>
  
</feed>
